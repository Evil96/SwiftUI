Proyecto 12, parte 1

- Core Data: Introducción

Lo básico para trabajar con Core Data.

Hay que crear un proyecto nuevo y llamarlo CoreDataProject. Forzosamente ese nombre o bueno, lo que sea distinto a
Core Data o CoreData porque podrían llegar puntos en los que Xcode se confunda y no entienda a quién nos estamos refiriendo.

- ¿Por qué .\self trabaja para ForEach?

En general utilizamos .\self en Core Data para poder dar un valor a un identificador, más que nada de una forma primitiva.
Valores Hash
Protocolo Hashable

Podemos hacer que Student (o bien, cualquier otro struct) se conforme al protocolo Hashable. Esto es muy parecido al
funcionamiento del protocolo Codable.

La importancia de analizar cómo es que se va a estar comportando el protocolo Hashable, es que si hay dos elementos con el
mismo tamaño de objeto, no haya problema. En realidad, Core Data tiene una forma muy inteligente de resolver este tipo de
situaciones: los objetos que crea por nosotros ya llevan una seleccion de otras propiedades por encima de las que ya definimos
en nuestro modelo de datos, incluyendo una que se llama "Object ID" - un identificador que es único hacia ese objeto sin
importar las propiedades que contenga.

- Creando subclases de NSManagedObject

- Guardado Condicional de NSManagedObjectContext

if self.moc.hasChanges {
    try? self.moc.save()
}

- Asegurándonos de que los objetos de tipo Core Data sean únicos utilizando restricciones

En SceneDelegate.swift:
import CoreData
context.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy

Proyecto 12, parte 2

- Filtrando un @FetchRequest utilizando NSPredicate


- Filtrando de manera dinámica un @FetchRequest con SwiftUI


- Relación uno a muchos con CoreData, SwiftUI y @FetchRequest






















