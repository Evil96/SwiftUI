Día 26
Proyecto 4; parte 1

Machine Learning

- Introducción

Este proyecto de SwiftUI es otra app de agregar “Forms” que preguntará al usuario que ingrese información y convertir esa información en una alerta.

En este proyecto, que pareciera muy simple, será la introducción al uso de Machine Learning

Todos los iPhone vienen con una tecnología llamada Core ML, lo que nos permite escribir código que haga predicciones acerca de nuevos datos basados en datos previos que ya ha visto. Empezaremos con datos raros o al azar, se los damos a nuestra mac como datos de entrenamiento, luego usar los resultados para construir una app capaz de hacer buenas estimaciones sobre nuevos datos - Todo dentro del dispositivo, y de manera completamente privada para los usuarios.

La app que haremos se llamará BetterRest y es una app que estará diseñada para ayudar a los bebedores de café tener una buena noche de sueño preguntando 3 cosas:
1. ¿Cuándo quieren levantarse?
2. ¿Cuántas horas de sueño quiere (deseables)?
3. ¿Cuántas tazas de café toman por día?

Una vez que tengamos esos 3 valores, los alimentaremos con Core ML para obtener un resultado diciéndonos cuando deberían irse a dormir. Si lo pensamos, hay miles de millones de posibles respuestas - todos los variados tiempos para despertar multiplicados por todos los números de horas de sueño, multiplicado nuevamente por el rango completo de cantidad de café.

Aquí es en donde el machine learning entra: usando una técnica llamada análisis de regresión podemos preguntarle a la computadora que con pase con un algoritmo capaz de representar todos nuestros datos. Esto permite aplicar el algoritmo a datos frescos que nunca antes haya visto, y obtener resultados acertados.

-> Descargar los archivos BetterRest.csv y SleepCalculator.mlmodel

Creamos un proyecto nuevo para SwiftUI



- Ingresando números con Stepper

SwiftUI tiene dos formas de permitir a los usuarios ingresar números, y lo que estaremos utilizando para este proyecto es Stepper: un simple boton de + y - que se puede presionar para seleccionar un número de manera precisa. La otra opción es Slider, el cual seguiremos utilizando después - también nos permite seleccionar de un rango de valores pero de manera menos precisa.

Steppers son lo suficientemente inteligentes para trabajar con cualquier tipo de número que queramos - podemos enlazarlos con Int, Double, y más, y automáticamente se va a adaptar. Por ejemplo, podríamos crear una propiedad como esta:

@State private var sleepAmount = 8.0

Luego podemos enlazar eso a un Stepper para que muestre el valor actual, como esto:

Stepper(value: $sleepAmount){
	Text(“\(sleepAmount) hours”)
}

Cuando ese código corra veremos 8.000000 horas, y puedes seleccionar el - o el + para irte hacia abajo a 7 o 6 y hacia números negativos o hacia arriba a 9, 10, 11 y así.

Por defecto los Steppers están limitados solo por el rango de su almacenamiento. Estamos usando un Double en este ejemplo, lo que significa que el máximo valor del Slider sera de 1.7976931348623157e+308.

Poniendo el rango:

Stepper(value: $sleepAmount, in: 4…12){
	Text(“\(sleepAmount) hours”)
}

Con ese cambio, el Stepper empezará en 8, luego permitirá al usuario movernos entre 4 y 12 de manera inclusiva, pero nada más. Esto nos permite controlar el rango de sueño para que los usuarios no intenten dormir por 24 horas, pero eso también nos permite rechazar valores imposibles - No puedes dormir por -1 horas por ejemplo.

Hay un tercer parámetro bastante útil para Stepper, el cual es un valor de tipo step - que tan lejos mover el valor en cada momento que se presione el + o el -. De nuevo, esto puede ser cualquier orden numérico, pero necesita coincidir con el tipo utilizado para el enlazado. Entonces, si estás enlazando a un entero no podemos utilizar un Double para el valor de tipo step.

En esta instancia, podríamos decir que los usuarios puedan seleccionar cualquier valor de sueño entre 4 y 12, moviendo en intervalos de 15 minutos el incremento:

Stepper(value: $sleepAmount, in: 4…12, step: 0.25){
	Text(“\(sleepAmount) hours”)
}

Eso empieza a verse útil - tenemos un rango preciso de valores razonables, un incremento con step sensible de 0.25, y los usuarios pueden ver exactamente lo que han escogido en cada momento.

Antes de seguir, hay que arreglar ese texto: dice 8.000000 ahorita, lo cual es acertado pero digamos que demasiado acertado. Podemos usar la interpolación de cadenas como lo hemos trabajado anteriormente:

Text(“\(sleepAmount, specifier: “%.2f”) hours”)

Pero también podemos dejarlo como %g para que no despliegue ceros innecesarios.

Text(“\(sleepAmount, specifier: “%g”) hours”)




- Seleccionando fechas y tiempo con DatePicker

SwiftUI nos da un tipo determinado de picker llamado DatePicker que puede ir ligado a una propiedad de tipo fecha. Si, Swift tiene un tipo dedicado para trabajar con fechas, y es llamado - locamente - Date.

Entonces, para utilizarlo hay que empezar con una propiedad de tipo @State:

@State private var wakeUp = Date()

Entonces ahora ya podemos enlazarlo con un picker de fecha así:

var body: some View{
	DatePicker(“Please enter a date”, selection: $wakeUp)
}

Intenta correr eso en el simulador para que vayas viendo cómo va quedando. Debería de poder verse una rueda giratoria con días y horas, más la etiqueta “Please enter a date” a la izquierda.

La etiqueta puede verse algo fea. Intentemos cambiarla por lo siguiente:

DatePicker(“”, selection: $wakeUp)

Pero si hacemos eso ahora tendremos dos problemas: el picker de fecha aún hace espacio para una etiqueta aunque esté vacía, y ahora los usuarios con el lector de pantalla activo (VoiceOver) no tendrán idea para qué es el date picker.

Hay dos alternativas, ambas que resuelven el problema.

Primero, podemos envolver el DatePicker en un Form:

var body: some View{
	Form{
		DatePicker(“Please Enter a Date”, selection: $wakeUp)
	}
}

Justo como un Picker normal esto cambia el modo en que SwiftUI renderiza la vista. No obtenemos un nuevo view empujado hacia un NavigationView ahora; en lugar de eso, obtenemos una simple lista de renglones que se dobla a un date picker cuando se presiona.

Esto se ve muy bonito, y combina la limpia simplicidad de forms con la interfaz familiar y amigable de los date pickers. Tristemente, ocasionalmente hay algunos glitches con la manera en que estos pickers son mostrados. Después nos enfocaremos en eso.

En vez de usar forms, otra alternativa es usar el modificador labelIsHidden(), así:

var body: some View{
	DatePicker(“Please Enter a Date”, selection: $wakeUp)
		.labelIsHidden()
}

Eso aún incluye a la etiqueta original para que los lectores de la pantalla lo puedan usar por VoiceOver, pero ahora no son visibles en pantalla - El date picker tomará todo el espacio en horizontal de la pantalla.

Date pickers nos proveen un par de opciones de configuración que controlan el cómo trabajan. Primero, podemos usar displayedComponents para decidir qué tipo de opciones deberían ver los usuarios:

- Si no damos este parámetro, el usuario ve día, hora y minuto.
- Si usamos .date el usuario ve mes, día y año.
- Si usamos .hourAndMinute los usuarios ven solo los componentes de hora y minuto

Entonces, podemos seleccionar un tiempo preciso, así:

DatePicker(“Please enter a time”, selection: $wakeUp, displayedComponents: .hourAndMinute)

Finalmente, hay un parámetro de tipo “in” que trabaja de la misma manera que con Stepper: podemos proveerle un rango de fecha, y el picker de fecha va a asegurar al usuario que no puede seleccionar debajo de ello.

Ahora, hemos estado utilizando rangos por unos momentos, y estamos acostumbrados a ver cosas como 1 … 5 o 0 ..< 10, pero también podemos usar fechas tipo Swift en rangos. Por ejemplo:

// when you create a new Date instance it will be set to the current date and time
let now = Date()

// create a second Date instance set to one day in seconds from now
let tomorrow = Date().addingTimeInterval(86400) 

// create a range from those two
let range = now ... tomorrow

Eso es realmente útil con DatePicker, pero hay algo aún mejor: Swift nos permite formar “one-sided ranges” - rangos donde nosotros especifiquemos ya sea el inicio o final pero no ambos, dejando que Swift infiera el otro lado.

Por ejemplo, podemos crear un date picker como este:

DatePicker(“Please enter a date”, selection: $wakeUp, in: Date()…)

Eso permitirá todas las fechas en el futuro, pero ninguna en el pasado - leámoslo como “De la fecha concurrente a cuando sea”.

- Trabajando con fechas

Teniendo a usuarios ingresando fechas es tan fácil como enlazar una propiedad @State de tipo Date a un control de SwiftUI de DatePicker, pero esto puede tornarse confuso (woolier).

Verás, trabajar con fechas es difícil. En realidad, MUY difícil. Más de lo que piensas.

Por ejemplo:

let now = Date()
let tomorrow = Date().addingTimeInterval(86400)
let range = now … tomorrow

Eso crea un rango de ahora (Date() es la fecha actual) al mismo tiempo de mañana (86400 es el numero de segundos en un día).

Eso podría verse sencillo, pero todos los días tienen 86400 segundos? Si sí, muchísima gente estaría desempleada. Pensemos en cómo se aprovecha el tiempo con la luz del día: a veces hay que adelantar el reloj una hora (perdiendo una hora) y otras atrasarlo (ganando una hora), significando que tal vez tengamos 23 o 25 horas en esos días. Luego hay saltos (leap) de segundos: tiempo que se le agrega al reloj para ajustarse a la rotación de la tierra.

Si tu piensas que eso es difícil, intenta correr esto desde la terminal de tu mac: cal. Esto imprime un simple calendario para el mes en el que estamos enseñándote los días de la semana. Ahora intenta correr cal 9 1752, lo cual te va a mostrar el calendario para septiembre de 1752 - como podrás darte cuenta, faltan 12 días completos gracias al cambio de calendario de Juliano a Gregoriando. 

Ahora, la razón de explicar todo esto no es propiamente para asustar - el uso de fechas para esta app son indispensables después de todo. En lugar de eso, hay que más bien entender la importancia y que para cualquier significante - cualquier uso de datos que en realidad importa en nuestro código - podemos nosotros confiar (rely) en los marcos de trabajo de Apple para cálculos y para formato.

En el proyecto usaremos fechas de las siguientes 3 maneras:

1. Escoger un tiempo sensible por default que sea “wake up”
2. Leer la hora y los minutos en los que quieran despertar
3. Mostrar la hora sugerida de dormir ya con un formato

Podríamos, si quisiéramos, hacer todo eso a mano, pero entonces tendrás que afrontar a la realidad del aprovechamiento de luz en el día, saltos de segundo, y calendarios Gregorianos.

Lo mejor es dejar que iOS haga todo ese trabajo por nosotros: es mucho menos trabajo, y está garantizado que sea correcto a pesar de la region en la que esté ubicado el usuario.

Vayamos atacando cada uno de los puntos de manera individual, empezando con escoger la hora de despertar.

Como ya has visto, Swift nos da Date para trabajar con fechas, y eso encapsula al año, mes, día, hora, minuto, segundo, zona horaria, y más. Sin embargo, no queremos andar pensando en todo eso - Queremos decir “dame las 8am como tiempo para levantarse, a pesar de qué día sea hoy.”

Swift tiene una manera ligeramente (slightly) diferente para este propósito llamada DateComponents, lo cual nos permite leer o escribir partes específicas de una fecha en lugar de todo completo.

Entonces, si quisiéramos una fecha que represente las 8 am de hoy, podríamos escribir el siguiente código:

var components = DateComponents()
components.hour = 8
components.minute = 0
let date = Calendar.current.date(from: components)

Ahora, debido a las dificultades sobre la validación de la fecha, ese método date(from:) en realidad retorna una fecha opcional, entonces es una buena idea usar “nil coalescing” para decir “Si eso falla, entonces solo regrésame la fecha actual”, como esto:

let date = Calendar.current.date(from: components) ?? Date()

El segundo reto es cómo podemos leer la hora en la que quiere el usuario despertarse. Recuerda, DatePicker esta ligado a un Date dándonos un montón de información, y necesitamos encontrar la manera de agarrar los componentes para la hora y los minutos.

Otra vez, DateComponents viene al rescate: podemos pedirle a iOS que provea los componentes específicos de una fecha, luego leerlos de vuelta. Un tropezón aquí es que hay una desconexión entre los valores que nosotros pedimos y los valores que recibimos gracias a la manera en que DateComponents trabaja: podemos preguntar por la hora y los minutos, pero vamos a ir de la mano de regreso a una instancia de DateComponents con valores opcionales para todas sus propiedades. Si, sabemos que la hora y los minutos estarán ahí porque son por los que hemos preguntado, pero aún necesitamos desenvolver los opcionales o proveer valores por defecto.

Entonces, podemos pasar a escribir el siguiente código:

let components = Calendar.current.dateComponents([.hour, .minute], from: someDate)
let hour = components.hour ?? 0
let minute = components.minute ?? 0

El último reto es el cómo podemos darle formato a las fechas y a los tiempos, y una vez más Swift nos da un tipo específico para hacer la mayoría del trabajo por nosotros. Ahora es algo llamado DateFormatter, y nos deja convertir una fecha a una cadena en una gran variedad de maneras.

Por ejemplo, si solo quisiéramos el tiempo de una fecha podríamos escribir lo siguiente:

let formatter = DateFormatter()
formatter.timeStyle = .short
let dateString = formatter.string(from: Date())

También podemos colocar (set) .dateStyle para obtener valores de fecha, y también pasar en un formato estándar utilizando dateFormat, pero bueno, eso ya rebasa los límites de este proyecto.

El punto es que las fechas son difíciles, pero Apple nos ha dado gran cantidad de ayuda para que trabajar con las fechas no parezca tan complicado.
Si aprendes a utilizarlas bien escribirás menos código, y escribirlo mejor también.
