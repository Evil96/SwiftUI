Flashzilla
Proyecto 17

Proyecto 17, parte 1

- Cómo utilizar gestos en SwiftUI

- Generando vibraciones con UINotificationFeedbackGenerator y Core Haptics
-------
func simpleSuccess() {
    let generator = UINotificationFeedbackGenerator()
    generator.notificationOccurred(.success)
}
-------
Text("Hello, World!")
    .onTapGesture(perform: simpleSuccess)
-------
import CoreHaptics
-------
@State private var engine: CHHapticEngine?
-------
func prepareHaptics() {
    guard CHHapticEngine.capabilitiesForHardware().supportsHaptics else { return }

    do {
        self.engine = try CHHapticEngine()
        try engine?.start()
    } catch {
        print("There was an error creating the engine: \(error.localizedDescription)")
    }
}
-------
func complexSuccess() {
    // make sure that the device supports haptics
    guard CHHapticEngine.capabilitiesForHardware().supportsHaptics else { return }
    var events = [CHHapticEvent]()

    // create one intense, sharp tap
    let intensity = CHHapticEventParameter(parameterID: .hapticIntensity, value: 1)
    let sharpness = CHHapticEventParameter(parameterID: .hapticSharpness, value: 1)
    let event = CHHapticEvent(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: 0)
    events.append(event)

    // convert those events into a pattern and play it immediately
    do {
        let pattern = try CHHapticPattern(events: events, parameters: [])
        let player = try engine?.makePlayer(with: pattern)
        try player?.start(atTime: 0)
    } catch {
        print("Failed to play pattern: \(error.localizedDescription).")
    }
}
-------
Text("Hello, World!")
    .onAppear(perform: prepareHaptics)
    .onTapGesture(perform: complexSuccess)
-------
for i in stride(from: 0, to: 1, by: 0.1) {
    let intensity = CHHapticEventParameter(parameterID: .hapticIntensity, value: Float(i))
    let sharpness = CHHapticEventParameter(parameterID: .hapticSharpness, value: Float(i))
    let event = CHHapticEvent(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: i)
    events.append(event)
}

for i in stride(from: 0, to: 1, by: 0.1) {
    let intensity = CHHapticEventParameter(parameterID: .hapticIntensity, value: Float(1 - i))
    let sharpness = CHHapticEventParameter(parameterID: .hapticSharpness, value: Float(1 - i))
    let event = CHHapticEvent(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: 1 + i)
    events.append(event)
}
------

- Deshabilitando la interactividad del usuario con allowsHitTesting()
ZStack {
    Rectangle()
        .fill(Color.blue)
        .frame(width: 300, height: 300)
        .onTapGesture {
            print("Rectangle tapped!")
        }

    Circle()
        .fill(Color.red)
        .frame(width: 300, height: 300)
        .onTapGesture {
            print("Circle tapped!")
        }
}
------
Circle()
    .fill(Color.red)
    .frame(width: 300, height: 300)
    .onTapGesture {
        print("Circle tapped!")
    }
    .allowsHitTesting(false)
------
Circle()
    .fill(Color.red)
    .frame(width: 300, height: 300)
    .contentShape(Rectangle())
    .onTapGesture {
        print("Circle tapped!")
    }
------
VStack {
    Text("Hello")
    Spacer().frame(height: 100)
    Text("World")
}
.onTapGesture {
    print("VStack tapped!")
}
------
VStack {
    Text("Hello")
    Spacer().frame(height: 100)
    Text("World")
}
.contentShape(Rectangle())
.onTapGesture {
    print("VStack tapped!")
}

*********************************************************************************************************************************************************

Proyecto 17, parte 2

- Dando eventos repetidos utilizando un temporizador (Timer)

struct ContentView: View {
    let timer = Timer.publish(every: 1, tolerance: 0.5, on: .main, in: .common).autoconnect()
    @State private var counter = 0

    var body: some View {
        Text("Hello, World!")
            .onReceive(timer) { time in
                if self.counter == 5 {
                    self.timer.upstream.connect().cancel()
                } else {
                    print("The time is now \(time)")
                }

                self.counter += 1
            }
    }
}

- Cómo ser notificado cuando tu app en SwiftUI se mueve al segundo plano (Como cuando el usuario regresa al inicio)
import SwiftUI

struct Background_Technique: View {
    var body: some View {
        VStack {
            Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)
                .onReceive(NotificationCenter.default.publisher(for: UIApplication.willResignActiveNotification)) { _ in
                    print("Moving to the background!")
                }
            
            Text("Hello, World!")
                .onReceive(NotificationCenter.default.publisher(for: UIApplication.willEnterForegroundNotification)) { _ in
                    print("Moving back to the foreground!")
                }
            
            Text("Hello, World!")
                .onReceive(NotificationCenter.default.publisher(for: UIApplication.userDidTakeScreenshotNotification)) { _ in
                    print("User took a screenshot!")
                }
        }
    }
}

//Another two of them:
//UIApplication.significantTimeChangeNotification is called when the user changes their clock or when daylight savings time changes.
//UIResponder.keyboardDidShowNotification is called when the keyboard is shown.

- Soportando necesidades de accesibilidad específica con SwiftUI
@Environment(\.accessibilityDifferentiateWithoutColor) var differentiateWithoutColor
------
struct ContentView: View {
    @Environment(\.accessibilityDifferentiateWithoutColor) var differentiateWithoutColor
    var body: some View {
        HStack {
            if differentiateWithoutColor {
                Image(systemName: "checkmark.circle")
            }

            Text("Success")
        }
        .padding()
        .background(differentiateWithoutColor ? Color.black : Color.green)
        .foregroundColor(Color.white)
        .clipShape(Capsule())
    }
}
------
struct ContentView: View {
    @Environment(\.accessibilityReduceMotion) var reduceMotion
    @State private var scale: CGFloat = 1

    var body: some View {
        Text("Hello, World!")
            .scaleEffect(scale)
            .onTapGesture {
                if self.reduceMotion {
                    self.scale *= 1.5
                } else {
                    withAnimation {
                        self.scale *= 1.5
                    }
                }
            }
    }
}
------
func withOptionalAnimation<Result>(_ animation: Animation? = .default, _ body: () throws -> Result) rethrows -> Result {
    if UIAccessibility.isReduceMotionEnabled {
        return try body()
    } else {
        return try withAnimation(animation, body)
    }
}
------
struct ContentView: View {
    @State private var scale: CGFloat = 1

    var body: some View {
        Text("Hello, World!")
            .scaleEffect(scale)
            .onTapGesture {
                withOptionalAnimation {
                    self.scale *= 1.5
                }
            }
    }
}
------
struct ContentView: View {
    @Environment(\.accessibilityReduceTransparency) var reduceTransparency
    var body: some View {
        Text("Hello, World!")
            .padding()
            .background(reduceTransparency ? Color.black : Color.black.opacity(0.5))
            .foregroundColor(Color.white)
            .clipShape(Capsule())
    }
}


*********************************************************************************************************************************************************

Proyecto 17, parte 3

ContentView:

import SwiftUI

struct ContentView: View {
    @State private var cards = [Card](repeating: Card.example, count: 10)
    
    var body: some View {
        ZStack {
            Image("background")
                .resizable()
                .scaledToFill()
                .edgesIgnoringSafeArea(.all)
            VStack {
                ZStack {
                    ForEach(0..<cards.count, id: \.self) { index in
                        CardView(card: self.cards[index]) {
                           withAnimation {
                               self.removeCard(at: index)
                           }
                        }
                        .stacked(at: index, in: self.cards.count)
                    }
                }
            }
        }
    }
    
    func removeCard(at index: Int) {
        cards.remove(at: index)
    }
}

extension View {
    func stacked(at position: Int, in total: Int) -> some View {
        let offset = CGFloat(total - position)
        return self.offset(CGSize(width: 0, height: offset * 10))
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

CardView:

import SwiftUI

struct CardView: View {
    let card: Card
    var removal: (() -> Void)? = nil
    
    @State private var isShowingAnswer = false
    @State private var offset = CGSize.zero

    var body: some View {
        ZStack {
            RoundedRectangle(cornerRadius: 25, style: .continuous)
                .fill(Color.white)
                .shadow(radius: 10)

            VStack {
                Text(card.prompt)
                    .font(.largeTitle)
                    .foregroundColor(.black)

                if isShowingAnswer {
                    Text(card.answer)
                        .font(.title)
                        .foregroundColor(.gray)
                }
            }
            .padding(20)
            .multilineTextAlignment(.center)
        }
        .frame(width: 450, height: 250)
        .rotationEffect(.degrees(Double(offset.width / 5)))
        .offset(x: offset.width * 5, y: 0)
        .opacity(2 - Double(abs(offset.width / 50)))
        .gesture(
            DragGesture()
                .onChanged { gesture in
                    self.offset = gesture.translation
                }

                .onEnded { _ in
                    if abs(self.offset.width) > 100 {
                        self.removal?()
                    } else {
                        self.offset = .zero
                    }
                }
        )
        .onTapGesture {
            self.isShowingAnswer.toggle()
        }
    }
}

struct CardView_Previews: PreviewProvider {
    static var previews: some View {
        CardView(card: Card.example)
    }
}

Card:

struct Card {
    let prompt: String
    let answer: String

    static var example: Card {
        Card(prompt: "Who played the 13th Doctor in Doctor Who?", answer: "Jodie Whittaker")
    }
}


*********************************************************************************************************************************************************

Proyecto 17, parte 4

- Coloreando vistas conforme el usuario haga Swipe

En CardView:

RoundedRectangle(cornerRadius: 25, style: .continuous)
    .fill(Color.white)
    .shadow(radius: 10)
    
Antes del modificador .shadow():

.background(
    RoundedRectangle(cornerRadius: 25, style: .continuous)
        .fill(offset.width > 0 ? Color.green : Color.red)
)

Cambiando al modificador .fill():

.fill(
    Color.white
        .opacity(1 - Double(abs(offset.width / 50)))
)

En el mismo CardView, hasta arriba:
@Environment(\.accessibilityDifferentiateWithoutColor) var differentiateWithoutColor

Y modificando al método RoundedRectangle:

RoundedRectangle(cornerRadius: 25, style: .continuous)
    .fill(
        differentiateWithoutColor
            ? Color.white
            : Color.white
                .opacity(1 - Double(abs(offset.width / 50)))

    )
    .background(
        differentiateWithoutColor
            ? nil
            : RoundedRectangle(cornerRadius: 25, style: .continuous)
                .fill(offset.width > 0 ? Color.green : Color.red)
    )
    .shadow(radius: 10)
    
Ahora, de vuelta a ContentView:

Primero -> @Environment(\.accessibilityDifferentiateWithoutColor) var differentiateWithoutColor

Luego, después del VStack que está dentro del ZStack:

if differentiateWithoutColor {
    VStack {
        Spacer()

        HStack {
            Image(systemName: "xmark.circle")
                .padding()
                .background(Color.black.opacity(0.7))
                .clipShape(Circle())
            Spacer()
            Image(systemName: "checkmark.circle")
                .padding()
                .background(Color.black.opacity(0.7))
                .clipShape(Circle())
        }
        .foregroundColor(.white)
        .font(.largeTitle)
        .padding()
    }
}

- Cuenta atrás con un Timer

Yendo a ContentView:

@State private var timeRemaining = 100
let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()

Luego, este modificador en el ZStack que se encuentra en la parte más hacia afuera del UI:

.onReceive(timer) { time in
    guard self.isActive else { return }
    if self.timeRemaining > 0 {
        self.timeRemaining -= 1
    }
}

Luego, dentro del VStack que contiene a nuestro ZStack de las cartas:

Text("Time: \(timeRemaining)")
    .font(.largeTitle)
    .foregroundColor(.white)
    .padding(.horizontal, 20)
    .padding(.vertical, 5)
    .background(
        Capsule()
            .fill(Color.black)
            .opacity(0.75)
    )
    
Debió quedar un código como el siguiente:

ZStack {
    Image("background")
        .resizable()
        .scaledToFill()
        .edgesIgnoringSafeArea(.all)

    VStack {
        Text("Time: \(timeRemaining)")
            .font(.largeTitle)
            .foregroundColor(.white)
            .padding(.horizontal, 20)
            .padding(.vertical, 5)
            .background(
                Capsule()
                    .fill(Color.black)
                    .opacity(0.75)
            )

        ZStack {
        
Todoluce bien, pero hay un pequeño problema con la aplicación y esto se debe sobretodo a cuando el usuario deja la app en background
y el timer no sabe quñe hacer y se pausa alrededor de 3 a 4 segundos después de que el usuario pasó a background.
Esto se soluciona de la siguiente manera:

Primero, una propiedad:
@State private var isActive = true

Luego, dos modificadores de tipo .onReceive:

.onReceive(NotificationCenter.default.publisher(for: UIApplication.willResignActiveNotification)) { _ in
    self.isActive = false
}
.onReceive(NotificationCenter.default.publisher(for: UIApplication.willEnterForegroundNotification)) { _ in
    self.isActive = true
}

Y por último modificamos el .onReceive que ya teníamos:

.onReceive(timer) { time in
    guard self.isActive else { return }
    if self.timeRemaining > 0 {
        self.timeRemaining -= 1
    }
}

- Terminando la app con AllowsHitTesting()

Primero, agregamos allowsHitTesting al ZStack que contiene a las cartas:

.allowsHitTesting(timeRemaining > 0)

Luego, necesitamos un método para resetear las cartas cuando el usuario ya no tenga más cartas que pasar:
func resetCards() {
    cards = [Card](repeating: Card.example, count: 10)
    timeRemaining = 100
    isActive = true
}

Al momento de terminarse las cartas, desplegamos un botón que va a hacer que se reinicien las mismas:
if cards.isEmpty {
    Button("Start Again", action: resetCards)
        .padding()
        .background(Color.white)
        .foregroundColor(.black)
        .clipShape(Capsule())
}

Agregamos este if en la funcion remove que es con el que el estado va a saber que ya no hay cartas:
if cards.isEmpty {
    isActive = false
}

Por último, actualizamos al modificador .onReceive para que en el background de la aplicación sepa si está o no vacío el conjunto de cartas:
.onReceive(NotificationCenter.default.publisher(for: UIApplication.willEnterForegroundNotification)) { _ in
    if self.cards.isEmpty == false {
        self.isActive = true
    }
}

*********************************************************************************************************************************************************

Proyecto 17, parte 5

- Haciendo que el iPhone vibre con UINotificationFeedbackGenerator

En CardView:
@State private var feedback = UINotificationFeedbackGenerator()

if self.offset.width > 0 {
    self.feedback.notificationOccurred(.success)
} else {
    self.feedback.notificationOccurred(.error)
}

self.removal?()

.onChanged { offset in
    self.offset = offset.translation
    self.feedback.prepare()
}

- Arreglando algunos bugs

En ContentView:
.allowsHitTesting(index == self.cards.count - 1)
Image(decorative: "background")

.accessibility(hidden: index < self.cards.count - 1)

De nuevo a CardView:
.accessibility(addTraits: .isButton)

@Environment(\.accessibilityEnabled) var accessibilityEnabled

VStack {
    if accessibilityEnabled {
        Text(isShowingAnswer ? card.answer : card.prompt)
            .font(.largeTitle)
            .foregroundColor(.black)
    } else {
        Text(card.prompt)
            .font(.largeTitle)
            .foregroundColor(.black)

        if isShowingAnswer {
            Text(card.answer)
                .font(.title)
                .foregroundColor(.gray)
        }
    }
}

De nuevo a ContentView:

HStack {
    Button(action: {
        withAnimation {
            self.removeCard(at: self.cards.count - 1)
        }
    }) {
        Image(systemName: "xmark.circle")
            .padding()
            .background(Color.black.opacity(0.7))
            .clipShape(Circle())
    }
    .accessibility(label: Text("Wrong"))
    .accessibility(hint: Text("Mark your answer as being incorrect."))
    Spacer()

    Button(action: {
        withAnimation {
            self.removeCard(at: self.cards.count - 1)
        }
    }) {
        Image(systemName: "checkmark.circle")
            .padding()
            .background(Color.black.opacity(0.7))
            .clipShape(Circle())
    }
    .accessibility(label: Text("Correct"))
    .accessibility(hint: Text("Mark your answer as being correct."))
}

y dentro del func removeCard:
guard index >= 0 else { return }

luego, dentro del struct de content view:
@Environment(\.accessibilityEnabled) var accessibilityEnabled

Luego, modificando el if:
if differentiateWithoutColor || accessibilityEnabled {

Por ultimo, de regreso a CardView:
.animation(.spring()) despues del .onTapGesture para que al hacer swipe se vea mejor

- Agregando y borrando cartas

En ContentView:
@State private var showingEditScreen = false

Luego, antes del if del ||:
VStack {
    HStack {
        Spacer()

        Button(action: {
            self.showingEditScreen = true
        }) {
            Image(systemName: "plus.circle")
                .padding()
                .background(Color.black.opacity(0.7))
                .clipShape(Circle())
        }
    }

    Spacer()
}
.foregroundColor(.white)
.font(.largeTitle)
.padding()

En Card.swift:

struct Card: Codable {

Creamos un archivo nuevo de nombre EditCards.swift

En ese archivo, escribimos lo siguiente:

struct EditCards: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var cards = [Card]()
    @State private var newPrompt = ""
    @State private var newAnswer = ""

    var body: some View {
        NavigationView {
            List {
                Section(header: Text("Add new card")) {
                    TextField("Prompt", text: $newPrompt)
                    TextField("Answer", text: $newAnswer)
                    Button("Add card", action: addCard)
                }

                Section {
                    ForEach(0..<cards.count, id: \.self) { index in
                        VStack(alignment: .leading) {
                            Text(self.cards[index].prompt)
                                .font(.headline)
                            Text(self.cards[index].answer)
                                .foregroundColor(.secondary)
                        }
                    }
                    .onDelete(perform: removeCards)
                }
            }
            .navigationBarTitle("Edit Cards")
            .navigationBarItems(trailing: Button("Done", action: dismiss))
            .listStyle(GroupedListStyle())
            .onAppear(perform: loadData)
        }
    }

    func dismiss() {
        presentationMode.wrappedValue.dismiss()
    }

    func loadData() {
        if let data = UserDefaults.standard.data(forKey: "Cards") {
            if let decoded = try? JSONDecoder().decode([Card].self, from: data) {
                self.cards = decoded
            }
        }
    }

    func saveData() {
        if let data = try? JSONEncoder().encode(cards) {
            UserDefaults.standard.set(data, forKey: "Cards")
        }
    }

    func addCard() {
        let trimmedPrompt = newPrompt.trimmingCharacters(in: .whitespaces)
        let trimmedAnswer = newAnswer.trimmingCharacters(in: .whitespaces)
        guard trimmedPrompt.isEmpty == false && trimmedAnswer.isEmpty == false else { return }

        let card = Card(prompt: trimmedPrompt, answer: trimmedAnswer)
        cards.insert(card, at: 0)
        saveData()
    }

    func removeCards(at offsets: IndexSet) {
        cards.remove(atOffsets: offsets)
        saveData()
    }
}

Luego, de regreso a ContentView:
.sheet(isPresented: $showingEditScreen, onDismiss: resetCards) {
    EditCards()
}

.onAppear(perform: resetCards)

y cambiamos esto:
@State private var cards = [Card](repeating: Card.example, count: 10)
Por esto:
@State private var cards = [Card]()

Luego, a los funcs:

func resetCards() {
        //cards = [Card](repeating: Card.example, count: 10)
        timeRemaining = 100
        isActive = true
        loadData()
    }
    
    func loadData() {
        if let data = UserDefaults.standard.data(forKey: "Cards") {
            if let decoded = try? JSONDecoder().decode([Card].self, from: data) {
                self.cards = decoded
            }
        }
    }
    
Y ya por último, en el navigationView de EditCards:
.navigationViewStyle(StackNavigationViewStyle())

Sin esa última línea, la .sheet sale totalmente en blanco



