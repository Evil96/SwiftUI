- Proyecto 13, parte 1
Instafilter

Vamos a empezar a utilizar CoreImage y a mezclar frameworks de Apple para incorporarlos a SwiftUI

- ¿Cómo una propiedad envolvente se vuelve un struct?



struct ContentView: View {
    @State private var blurAmount: CGFloat = 0

    var body: some View {
        VStack {
            Text("Hello, World!")
                .blur(radius: blurAmount)

            Slider(value: $blurAmount, in: 0...20)
        }
    }
}

Digamos que quieres imprimir el valor del Slider de acuerdo a su posición por fines de debuggeo. Pensaríamos en escribir algo
como lo siguiente:

@State private var blurAmount: CGFloat = 0 {
    didSet {
        print("New value is \(blurAmount)")
    }
}

Pero, ¡Oh Sorpresa!, no hace realmente nada.

Esto se debe a que como tal el @State está envolviendo a nuestro String y y"Cuandoa habíamos visto previamente que no podemos
modificar propiedades dentro de la vista, PERO también sabemos que @State genera por sí mismo otro Struct, entonces, llega
la verdadera pregunta: ¿Cómo "ese" struct lo podemos modificar nosotros?

Xcode tiene una herramienta bastante buena llamada "Open Quickly", "Abrir Rápido" en español, con la cual podemos acceder
con CMD + Shift + O.

****Falta explicación de qué pasa al ingresar al editor de las propiedades*****

Pero ahora, volviendo al código roto:

@State private var blurAmount: CGFloat = 0 {
    didSet {
        print("New value is \(blurAmount)")
    }
}

Por encima, este código dice: "Cuando el valor de blurAmount cambie, imprime su valor".
Pero, tras bastidores y debido a que @State envuelve más bien su valor, entonces, lo que está diciendo es:
"Cuando el struct State que envuelve a blurAmount cambie, imprime el nuevo valor de blur."

Necesitamos crear algo llamada Custom Bindings en SwiftUI.

- Creando Custom Bindings en SwiftUI

Es necesario reestructurar la forma en que vamos a escribir las instrucciones que necesitamos considerando lo que ahora
ya sabemos sobre los structs y los wrappers.
Necesitamos utilizar algo llamado Custom Bindings para poder lograr el cometido.

struct ContentView: View {
    @State private var blurAmount: CGFloat = 0

    var body: some View {
        let blur = Binding<CGFloat>(
            get: {
                self.blurAmount
            },
            set: {
                self.blurAmount = $0
                print("New value is \(self.blurAmount)")
            }
        )

        return VStack {
            Text("Hello, World!")
                .blur(radius: blurAmount)

            Slider(value: blur, in: 0...20)
        }
    }
}

Lo que está pasando entre el setter y el getter del custom binding lo podemos ver en la búsqueda rápida (CMD + SHIFT + O)
y escribir "Binding".


- Mostrando múltiples opciones con ActionSheet

****Pendiente expliación aquí

***************************************************************************************************************************

- Proyecto 13, parte 2

- Integrando CoreImage con SwiftUI

Aplicando el filtro sepia a la imagen de ejemplo:
****Pendiente codigo de sepia y explicación de cómo llegar de Core Image a una vista en SwiftUI*****

Aplicando filtro de pixelado:

let currentFilter = CIFilter.pixellate()
currentFilter.inputImage = beginImage
currentFilter.scale = 100

Aplicando filtro "Efecto Cristal":

let currentFilter = CIFilter.crystallize()
currentFilter.inputImage = beginImage
currentFilter.radius = 200

En este ultimo se genera un bug

con kCIInputImage:

let currentFilter = CIFilter.crystallize()
currentFilter.setValue(beginImage, forKey: kCIInputImageKey)
currentFilter.radius = 200

Aplicando twirl distortion:

guard let currentFilter = CIFilter(name: "CITwirlDistortion") else { return }
currentFilter.setValue(beginImage, forKey: kCIInputImageKey)
currentFilter.setValue(2000, forKey: kCIInputRadiusKey)
currentFilter.setValue(CIVector(x: inputImage.size.width / 2, y: inputImage.size.height / 2), forKey: kCIInputCenterKey)

- Envolviendo un UIViewController en una vista de SwiftUI

Incorporando las clases de UIKit hacia una vista en SwiftUI.

CMD + N para crear un nuevo archivo de tipo Swift y llamarlo ImpagePicker.swift
Añadir "Import SwiftUI" al código y las siguientes líneas de código en ese archivo:

struct ImagePicker: UIViewControllerRepresentable {
    typealias UIViewControllerType = UIImagePickerController
}

Al escribir esas líneas, aún no es suficiente. De hecho, Xcode va a lanzar un error en el que permitirá realizar cambios de
manera automática. Presiona la bolita roja con centro blanco para poder llevar a cabo eso.
Debemos terminar con un código como el siguiente:

struct ImagePicker: UIViewControllerRepresentable {
    func makeUIViewController(context: UIViewControllerRepresentableContext<ImagePicker>) -> UIImagePickerController {
        code
    }

    func updateUIViewController(_ uiViewController: UIImagePickerController, context: UIViewControllerRepresentableContext<ImagePicker>) {
        code
    }
}

No vamos a utilizar a updateUIViewController(), entonces en realidad puedes simplemente borrar la línea "code" y que el
método quede vacío.

Sin embargo, makeUIViewController() si es importante, por lo que, por favor, agrega las siguientes líneas de código en
ese método:
let picker = UIImagePickerController()
return picker

Pronto le seguiremos metiendo más código a esa parte.

Pero ahora, regrésate a ContentView.swift
Ya podemos decir que los métodos de UIView ya pueden ser totalmente válidos como vistas de SwiftUI.
Escribe el siguiente código en ContentView.swift:

struct ContentView: View {
    @State private var image: Image?
    @State private var showingImagePicker = false

    var body: some View {
        VStack {
            image?
                .resizable()
                .scaledToFit()

            Button("Select Image") {
               self.showingImagePicker = true
            }
        }
        .sheet(isPresented: $showingImagePicker) {
            ImagePicker()
        }
    }
}

Ahora si, puedes correr el proyecto.

Podrás notar que hay un botón en nuestra vista que dice "Select Image" y al presionarlo, nos manda de abajo para arriba una
hoja en donde podemos nosotros escoger una imagen. Eso está bien por ahora, porque como podrás notar, a pesar de seleccionar
la imagen, no la pone en nuestra vista de SwiftUI. Para lograr eso, todavía nos falta ver un tema llamado "Coordinators".

***************************************************************************************************************************

Proyecto 13, parte 3

- Usando "Coordinators" para administrar el Vista-Controlador con SwiftUI

***Pendiente de expliación*******

Lo que hicimos fue:
- Crear una vista de SwiftUI que se pueda conformar a UIViewControllerRepresentable
- Le dimos un método makeUIViewController() que creó un orden de UIViewController, el cual en nuestro ejemplo fue un
UIImagePickerController
- Agregamos una Coordinator anidada para actuar como puente entre el view controller de UIKit y nuestra vista de SwiftUI
- Le dimos al coordinador el método didFinishPickingMediaWithInfo, el cual será ejecutado por UIKit cuando se seleccione
una imagen
- Finalmente, le dimos a nuestro ImagePicker una propiedad @Binding para que pueda mandar los cambios de regreso a la vista
padre

Y a partir de ahí, tenemos suficiente para este proyecto con coordinators.
No es tan bonito como SwiftUI, pero es muy funcional, y más cuando se trata de unir ambos frameworks.


- Cómo guardar imágenes a la galería de fotos del usuario

****Pendiente de explicación*******

***************************************************************************************************************************

Proyecto 13, parte 4

- Creando nuestro UI Básico

- Importando una imagen a SwiftUI utilizando UIImagePickerController

- Filtros basicos utilizando Core image


