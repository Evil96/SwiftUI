Proyecto 16, parte 1

- Introducción a Hot Prospects

Será una app que sea capaz de manejar las juntas que se lleguen a tener con personas como en un evento o parecido y va a ser capaz hasta de almacenar códigos
QR

- Leyendo valores personalizados desde el entorno con @EnvironmentObject

class User: ObservableObject {
    @Published var name = "Taylor Swift"
    
}

struct EditView: View {
    @EnvironmentObject var user: User
    
    var body: some View {
        TextField("Name", text: $user.name)
    }
}

struct DisplayView: View {
    @EnvironmentObject var user: User
    
    var body: some View {
        Text(user.name)
    }
}

struct TechniqueContentView: View {
    let user = User()
    
    var body: some View {
        VStack {
            EditView().environmentObject(user)
            DisplayView().environmentObject(user)
        }
        //You can also write the modifiers outside:
        //.environmentObject(user)
    }
}

- Creando pestañas con TabView y tabItem()

struct TechniqueTabView: View {
    @State private var selectedTab = 0
    
    var body: some View {
        TabView(selection: $selectedTab) {
            Text("Tab 1")
                .onTapGesture {
                    self.selectedTab = 1
            }
            .tabItem {
                Image(systemName: "star")
                Text("One")
            }
            .tag(0)
            
            Text("Tab 2")
                .tabItem {
                    Image(systemName: "star.fill")
                    Text("Two")
            }
            .tag(1)
        }
    }
}

**********************************************************************************************************************************************************

Proyecto 16, parte 2

- Comprendiendo el tipo Resultado de Swift (Result)

Hay una pequeña complejidad que estamos trabajando aquí. Cuando pasamos un closure a una función, Swift necesita saber si es que va a ser utilizado de manera inmediata
o si va a ser usado después. Si es usado inmediatamente - el por defecto - entonces Swift es feliz de simplemente de correr el closure. Pero si no corre inmediatamente,
entonces es posible que lo que sea que haya creado al closure haya sido destruido y no existe ya en memoria, caso en el cual el closure también sería destruído
y no podría correrse (lol).

Esto último se arregla con @escaping

func fetchData(from urlString: String, completion: @escaping (Result<String, NetworkError>) -> Void) {
        DispatchQueue.main.async {
            completion(.failure(.badURL))
        }
    }
    
Ya el código completo luce de la siguiente manera:

enum NetworkError: Error {
    case badURL, requestFailed, unknown
}

struct TechniqueResultType: View {
    
    var body: some View {
        Text("Hello World!")
            .onAppear {
                self.fetchData(from: "https://www.apple.com") { result in
                    switch result {
                    case .success(let str):
                        print(str)
                    case .failure(let error):
                        switch error {
                        case .badURL:
                            print("Bad URL")
                        case .requestFailed:
                            print("Network problems")
                        case .unknown:
                            print("Unknown error")
                        }
                    }
                }
        }
    }
    
    func fetchData(from urlString: String, completion: @escaping (Result<String, NetworkError>) -> Void) {
        //check the URL is OK, otherwise return with a failure
        guard let url = URL(string: urlString) else {
            completion(.failure(.badURL))
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            //The task has completed - push our work back to the main thread
            DispatchQueue.main.async {
                if let data = data {
                    //success: convert the data to a string and send it back
                    let stringData = String(decoding: data, as: UTF8.self)
                    completion(.success(stringData))
                } else if error != nil {
                    //any sort of network failure
                    completion(.failure(.requestFailed))
                } else {
                    //this ought not to be possible, yet here we are
                    completion(.failure(.unknown))
                }
            }
        }.resume()
    }
}

- Publicando manualmente cambios en ObservableObject

Tanto este:
    @Published var value = 0

Como este:
        /*
        var value = 0 {
            willSet {
                objectWillChange.send()
            }
        }
        */

Hacen el mismo trabajo, solo que en el segundo ejemplo tenemos mayor apertura para hacer lo que nosotros queramos con ese comportamiento.

- Controlando una interpolación de imágenes en SwiftUI

struct TechniqueImageInterpolation: View {
    var body: some View {
        Image("example")
            .interpolation(.none)
            .resizable()
            .scaledToFit()
            .frame(maxHeight: .infinity)
            .background(Color.black)
            .edgesIgnoringSafeArea(.all)
    }
}

**********************************************************************************************************************************************************

Proyecto 16, parte 3

- Creando menús de contexto (Context Menus)

@State private var backgroundColor = Color.red

VStack {
            Text("Hello, World!")
                .padding()
                .background(backgroundColor)
            
            Text("Change Color")
                .padding()
                .contextMenu {
                    Button(action: {
                        self.backgroundColor = .red
                    }) {
                        Text("Red")
                        Image(systemName: "checkmark.circle.fill")
                            .foregroundColor(.red)
                    }
                    
                    Button(action: {
                        self.backgroundColor = .green
                    }) {
                        Text("Green")
                    }
                    
                    Button(action: {
                        self.backgroundColor = .blue
                    }) {
                        Text("Blue")
                    }
                }
        }
        
- Programando (en tiempo) notificaciones locales

VStack {
            Button("Request permission") {
                UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { success, error in
                    if success {
                        print("All set!")
                    } else if let error = error {
                        print(error.localizedDescription)
                    }
                }
            }
            .padding()
            
            Spacer()
            
            Button("Schedule notification") {
                let content = UNMutableNotificationContent()
                content.title = "Feed the cat"
                content.subtitle = "It looks hungry"
                content.sound = UNNotificationSound.default

                // show this notification five seconds from now
                let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)

                // choose a random identifier
                let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)

                // add our notification request
                UNUserNotificationCenter.current().add(request)
            }
            .padding()
        }
        
- Agregando dependencias de Swift en Xcode (Swift Package Manager (SPM))

File > Swift Packages > Add Package Dependency

SemVer (Semantic Versioning) siendo:

Ejemplo -> Versión 1.5.3, el 1 es el "mayor number", el 5 es el "minor number" y el 3 es el "patch number".

**********************************************************************************************************************************************************

Proyecto 16, parte 4

- Creando nuestro Tab bar

- Compartiendo datos entre tabs utilizando @EnvironmentObject

- Filtrando una lista de manera dinámica

**********************************************************************************************************************************************************

Proyecto 16, parte 5

- Generando y escalando un código QR

En MeView:

import CoreImage.CIFilterBuiltins
import SwiftUI

struct MeView: View {
    @State private var name = "Anonymous"
    @State private var emailAddress = "you@yoursite.com"
    
    let context = CIContext()
    let filter = CIFilter.qrCodeGenerator()
    
    var body: some View {
        NavigationView {
            VStack {
                TextField("Name", text: $name)
                    .textContentType(.name)
                    .font(.title)
                    .padding(.horizontal)

                TextField("Email address", text: $emailAddress)
                    .textContentType(.emailAddress)
                    .font(.title)
                    .padding([.horizontal, .bottom])
                
                Image(uiImage: generateQRCode(from: "\(name)\n\(emailAddress)"))
                    .interpolation(.none)
                    .resizable()
                    .scaledToFit()
                    .frame(width: 200, height: 200)

                Spacer()
            }
            .navigationBarTitle("Your code")
        }
    }
    
    func generateQRCode(from string: String) -> UIImage {
        let data = Data(string.utf8)
        filter.setValue(data, forKey: "inputMessage")

        if let outputImage = filter.outputImage {
            if let cgimg = context.createCGImage(outputImage, from: outputImage.extent) {
                return UIImage(cgImage: cgimg)
            }
        }

        return UIImage(systemName: "xmark.circle") ?? UIImage()
    }
}

- Escaneando códigos QR en SwiftUI

En ProspectsView.swift:

import CodeScanner ----> IMPORTANTE: Se agrega una dependencia ya que en SwiftUI aún no se puede leer un código QR tan fluidamente

En states:
@State private var isShowingScanner = false

En el botón de escaneo:
self.isShowingScanner = true

La acción al presionar el botón de escaneo:
.sheet(isPresented: $isShowingScanner) {
                CodeScannerView(codeTypes: [.qr], simulatedData: "Edgar V\nedgar@edgarvil.com", completion: self.handleScan)
            }

Método para hacer funcionar la lectura del código QR:
func handleScan(result: Result<String, CodeScannerView.ScanError>) {
       self.isShowingScanner = false
        switch result {
        case .success(let code):
            let details = code.components(separatedBy: "\n")
            guard details.count == 2 else { return }

            let person = Prospect()
            person.name = details[0]
            person.emailAddress = details[1]

            self.prospects.people.append(person)
        case .failure(let error):
            print("Scanning failed")
        }
    }

- Agregando opciones con un context menu

En ProspectsView.swift:
.contextMenu {
                        Button(prospect.isContacted ? "Mark Uncontacted" : "Mark Contacted" ) {
                            prospect.isContacted.toggle()
                        }
                    }

En Prospect.swift (la clase):

func toggle(_ prospect: Prospect) {
    objectWillChange.send()
    prospect.isContacted.toggle()
}

Importante: Debes llamar a objectWillChange.send() justo antes de cambiar a tu propiedad para asegurar que SwiftUI jale su animación de manera correcta.

De vuelta a ProspectsView.swift:

self.prospects.toggle(prospect)

Por último, en la clase nuevamente cambiamos esto:

var isContacted = false

por esto:

fileprivate(set) var isContacted = false

fileprivate agrega seguridad a la hora de correr apps de este tipo

**********************************************************************************************************************************************************

Proyecto 16, parte 6

- Guardando y cargando datos con UserDefaults

En Prospect.swift:

class Prospects: ObservableObject {
    @Published var people: [Prospect]

    init() {
        if let data = UserDefaults.standard.data(forKey: "SavedData") {
            if let decoded = try? JSONDecoder().decode([Prospect].self, from: data) {
                self.people = decoded
                return
            }
        }

        self.people = []
    }
    
    func save() {
        if let encoded = try? JSONEncoder().encode(people) {
            UserDefaults.standard.set(encoded, forKey: "SavedData")
        }
    }
    
    func toggle(_ prospect: Prospect) {
        objectWillChange.send()
        prospect.isContacted.toggle()
        save()
    }
}

Ahora, en ProspectsView.swift, línea 93:

self.prospects.save()

Luego, de vuelta a Prospect.swift:

Linea 22 ---> static let saveKey = "SavedData"

Linea 25 ---> if let data = UserDefaults.standard.data(forKey: Self.saveKey) {

Linea 37 ---> UserDefaults.standard.set(encoded, forKey: Self.saveKey)

De vuelta a Prospect:

func add(_ prospect: Prospect) {
        people.append(prospect)
        save()
    }
   
Linea 21 ---> @Published private(set) var people: [Prospect]

Linea 35 ---> private func save() {

Como ya se hace privado el método, la manera de aplicarlo en ProspectsView.swift ya no va a funcionar, entonces, hay que reemplazar estas dos lineas:
//self.prospects.people.append(person)
            
//self.prospects.save()

Con esta:
self.prospects.add(person)

Y queda agregado User Defaults con la mejor implementación posible de software usando mejores prácticas de programación que las habituales.

- Agregando notificaciones a la pantalla bloqueada de la aplicación

En ProspectsView.swift:

func addNotification(for prospect: Prospect) {
        let center = UNUserNotificationCenter.current()

        let addRequest = {
            let content = UNMutableNotificationContent()
            content.title = "Contact \(prospect.name)"
            content.subtitle = prospect.emailAddress
            content.sound = UNNotificationSound.default

           // var dateComponents = DateComponents()
           // dateComponents.hour = 9
           // let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)

            let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)
            
            let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)
            center.add(request)
        }

        center.getNotificationSettings { settings in
            if settings.authorizationStatus == .authorized {
                addRequest()
            } else {
                center.requestAuthorization(options: [.alert, .badge, .sound]) { success, error in
                    if success {
                        addRequest()
                    } else {
                        print("D'oh")
                    }
                }
            }
        }
    }
    
Y por último, dentro del ContextMenu:

if !prospect.isContacted {
                            Button("Remind Me") {
                                self.addNotification(for: prospect)
                            }
                        }
                        
Y hemos terminado un proyecto más.


Proyecto 16, parte 7

Wrap up del proyectp y cuestionario
