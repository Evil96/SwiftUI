Proyecto 16, parte 1

- Introducción a Hot Prospects

Será una app que sea capaz de manejar las juntas que se lleguen a tener con personas como en un evento o parecido y va a ser capaz hasta de almacenar códigos
QR

- Leyendo valores personalizados desde el entorno con @EnvironmentObject

class User: ObservableObject {
    @Published var name = "Taylor Swift"
    
}

struct EditView: View {
    @EnvironmentObject var user: User
    
    var body: some View {
        TextField("Name", text: $user.name)
    }
}

struct DisplayView: View {
    @EnvironmentObject var user: User
    
    var body: some View {
        Text(user.name)
    }
}

struct TechniqueContentView: View {
    let user = User()
    
    var body: some View {
        VStack {
            EditView().environmentObject(user)
            DisplayView().environmentObject(user)
        }
        //You can also write the modifiers outside:
        //.environmentObject(user)
    }
}

- Creando pestañas con TabView y tabItem()

struct TechniqueTabView: View {
    @State private var selectedTab = 0
    
    var body: some View {
        TabView(selection: $selectedTab) {
            Text("Tab 1")
                .onTapGesture {
                    self.selectedTab = 1
            }
            .tabItem {
                Image(systemName: "star")
                Text("One")
            }
            .tag(0)
            
            Text("Tab 2")
                .tabItem {
                    Image(systemName: "star.fill")
                    Text("Two")
            }
            .tag(1)
        }
    }
}

**********************************************************************************************************************************************************

Proyecto 16, parte 2

- Comprendiendo el tipo Resultado de Swift (Result)

Hay una pequeña complejidad que estamos trabajando aquí. Cuando pasamos un closure a una función, Swift necesita saber si es que va a ser utilizado de manera inmediata
o si va a ser usado después. Si es usado inmediatamente - el por defecto - entonces Swift es feliz de simplemente de correr el closure. Pero si no corre inmediatamente,
entonces es posible que lo que sea que haya creado al closure haya sido destruido y no existe ya en memoria, caso en el cual el closure también sería destruído
y no podría correrse (lol).

Esto último se arregla con @escaping

func fetchData(from urlString: String, completion: @escaping (Result<String, NetworkError>) -> Void) {
        DispatchQueue.main.async {
            completion(.failure(.badURL))
        }
    }
    
Ya el código completo luce de la siguiente manera:

enum NetworkError: Error {
    case badURL, requestFailed, unknown
}

struct TechniqueResultType: View {
    
    var body: some View {
        Text("Hello World!")
            .onAppear {
                self.fetchData(from: "https://www.apple.com") { result in
                    switch result {
                    case .success(let str):
                        print(str)
                    case .failure(let error):
                        switch error {
                        case .badURL:
                            print("Bad URL")
                        case .requestFailed:
                            print("Network problems")
                        case .unknown:
                            print("Unknown error")
                        }
                    }
                }
        }
    }
    
    func fetchData(from urlString: String, completion: @escaping (Result<String, NetworkError>) -> Void) {
        //check the URL is OK, otherwise return with a failure
        guard let url = URL(string: urlString) else {
            completion(.failure(.badURL))
            return
        }
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            //The task has completed - push our work back to the main thread
            DispatchQueue.main.async {
                if let data = data {
                    //success: convert the data to a string and send it back
                    let stringData = String(decoding: data, as: UTF8.self)
                    completion(.success(stringData))
                } else if error != nil {
                    //any sort of network failure
                    completion(.failure(.requestFailed))
                } else {
                    //this ought not to be possible, yet here we are
                    completion(.failure(.unknown))
                }
            }
        }.resume()
    }
}

- Publicando manualmente cambios en ObservableObject

Tanto este:
    @Published var value = 0

Como este:
        /*
        var value = 0 {
            willSet {
                objectWillChange.send()
            }
        }
        */

Hacen el mismo trabajo

**********************************************************************************************************************************************************
