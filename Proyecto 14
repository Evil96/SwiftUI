Proyecto 14, parte 1

- Agregando el "Conformance" del protocolo Comparable para tipos personalizados

import SwiftUI

struct User: Identifiable, Comparable{
    let id = UUID()
    let firstName: String
    let lastName: String
    
    static func < (lhs: User, rhs: User) -> Bool{
        lhs.lastName < rhs.lastName
    }
}

struct ContentView: View {
    let users = [
        User(firstName: "Arnold", lastName: "Rimmer"),
        User(firstName: "Kristine", lastName: "Kochanski"),
        User(firstName: "David", lastName: "Lister"),
        ].sorted()
    
    var body: some View {
        List(users){ user in
            Text("\(user.lastName), \(user.firstName)")
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}

- Escribiendo datos al directorio de documentos

Text("Hello World")
            .onTapGesture {
                let str = "Text Message"
                let url = self.getDocumentsDirectory().appendingPathComponent("message.txt")
                
                do{
                    try str.write(to: url, atomically: true, encoding: .utf8)
                    let input = try String(contentsOf: url)
                    print(input)
                } catch {
                    print(error.localizedDescription)
                }
        }
        
func getDocumentsDirectory() -> URL {
        // find all possible documents directories for this user
        let paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)

        // just send back the first one, which ought to be the only one
        return paths[0]
    }
    
- Cambiando entre estados con enums



******************************************************************************************************************

Proyecto 14, parte 2

- Integrando MapKit con SwiftUI

- Comunic√°ndonos a un coordinator de MapKit

- Usando Touch ID y Face ID en SwiftUI
